<?php

/**
 * @file
 * Contains field_inheritance.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_help().
 */
function field_inheritance_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the field_inheritance module.
    case 'help.page.field_inheritance':
      $output = '';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function field_inheritance_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'eventinstance') {
    $inherited_fields = \Drupal::entityTypeManager()->getStorage('field_inheritance')->loadMultiple();
    if (!empty($inherited_fields)) {
      foreach ($inherited_fields as $field) {
        $settings = [
          'source field' => $field->sourceField(),
          'method' => $field->type(),
          'plugin' => $field->plugin(),
        ];

        if ($field->entityField()) {
          $settings['entity field'] = $field->entityField();
        }

        $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('eventseries', 'eventseries');

        $type = 'string';
        if (!empty($field_definitions[$field->sourceField()])) {
          $settings = array_merge($settings, $field_definitions[$field->sourceField()]->getSettings());
          $type = $field_definitions[$field->sourceField()]->getType();
        }

        $class = '\Drupal\field_inheritance\FieldInheritanceFactory';
        if ($field->plugin() === 'entity_reference_inheritance') {
          $class = '\Drupal\field_inheritance\EntityReferenceFieldInheritanceFactory';
        }

        // Allow developers to override the class to use for a field.
        \Drupal::moduleHandler()->alter('field_inheritance_inheritance_class', $class, $field);

        $fields[$field->id()] = BaseFieldDefinition::create($type)
          ->setLabel(t('Inherited @label', ['@label' => $field->label()]))
          ->setName($field->id())
          ->setDescription(t('The inherited field: @field', ['@field' => $field->label()]))
          ->setComputed(TRUE)
          ->setClass($class)
          ->setSettings($settings)
          ->setTargetEntityTypeId($entity_type->id())
          ->setTranslatable(FALSE)
          ->setRevisionable(FALSE)
          ->setReadOnly(TRUE)
          ->setDisplayConfigurable('view', TRUE);
      }
    }
  }
}
